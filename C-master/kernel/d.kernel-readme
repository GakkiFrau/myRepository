==============================================================================

readme
------

readme基本上是软件中介绍和使用软件向导的标准配置文档.就像他的名字一样"看看我".
通常取过来一个软件,解压之后我们怎么使用他呢?readme就起到这样的作用.


kernel readme翻译
-----------------

	Linux kernel release 4.x <http://kernel.org/>

这些是Linux版本4的发行说明。仔细的读这些，他将告诉你这些是关于什么的，解释如何
安装内核和在一些东西出错的的情况下能够做些什么事情。

LINUX是什么？

 linux是一个unix系统的克隆，由Linus Torvalds在loosely-knit的网络黑客团队的援助
 下编写出来的。它符合POSIX和单一UNIX规范。

 他拥有你所期望的在一个现代完全成熟Unix的所有特性，包括真正的多任务，虚拟内存，
 共享库，按需加载，共享的写时拷贝可执行文件，正确的内存管理和包括IPv4和IPv6的
 网络。

 他在这个GUN General Public License（GPL）下发布-看看这个随同的COPYING的更加详
 细的文件。

他能够在什么样的硬件上运行？

 尽管最开始是为了在32位的x86架构个人电脑（386或者更高），但是今天至少能够在像
 Compaq Alpha AXP，Sun SPARC和UltraSPARC，Motorola 68000，PowerPC，PowerPC64，
 ARM，Hitachi SuperH，Cell，IBM S/390，MIPS，HP PA-RISC，Inter IA-64，DEC VAX，
 AMD x86-64，AXIS CRIS，Xtensa，Tilera TILE，AVR32，ARC和Renesas M32R架构上面
 运行了。

 Linux能够很容易的移植到大部分的32位和64位架构的机器上，只要他们有一个内存分页
 管理单元（PMMU）和GNU C编译器（gcc）（这个GNU编译套件的部分，GCC）。Linux也能
 够移植到一个没有PMMU的大多数的架构上面，这样的话功能可能会受到明显的限制。
 Linux也可以移植到自己的上面。你能够将内核作为一个用户空间的应用程序来运行这个
 他-这被叫做用户模式的Linux（UML）。

文档：

-在网络上和书籍中有很多的文档可以找到，既有Linux特有的也有通常UNIX的问题。我推
 荐LDP（Linux文档工程）的任何Linux FTP站点的文档子目录。这个README不意味着是关
 于系统的文档，关于系统的文档有更过更好的源可以找到。

-在Documentation/下的子目录有很多各种各样的README文件。那些包含了典型的对于一
 些驱动安装内核特性的说明样例。看一下Documentation/00-INDEX，是包含每一个文件
 的列表。请读这个Changes文件，他包含了那些由于升级你的内核所产生的问题的信息。

-这个Documentation/DocBook/子目录包含了一些对于内核开发者和内核用户的指导。那
 些指导可以被渲染成如：PostScript，PDF，HTML和man文档等等的一定格式。安装后，
 可以使用make psdocs，make pdfdocs，make htmldocs或make mandocs来渲染成相应要
 求的格式。

安装内核源：

-假如你要安装整个代码源，把这个内核压缩文件放在你有权限的目录（例如：你的home
 目录）中并解压他：

  xz -cd linux-4.X.tar.xz | tar xvf -

 用最新的内核版本号去替换这个X。

 不要使用这个/usr/src/linux目录区域！这个区域通常有（也不完全）被库的头文件使
 用的内核头文件。那个区域应该匹配库，而不是被那些内核怨妇碰巧使用到这个区域弄
 的一团糟。

-你也能够通过打补丁来在4.x发行版之间进行升级。补丁是以xz格式来发布的。为了要打
 补丁（获得最新的补丁），需要在内核源（linux-4.X）的顶层目录键入并执行：

  xz -cd ../patch-4.x.xz | patch -p1

 按照顺序，你应该可以做到的。你可能想要移除这个备份文件（some-file-name~或者是
 some-file-name.orig），确保没有失败补丁（some-file-name#或some-file-name.rej）
 如果有的话，你或者我犯了一个错误。

 不像给4.x内核打补丁，要给4.x.y的内核打补丁（应该这是作为稳定的内核）不是增进
 式的而是替代的应用到基础4.x内核的目录。例如，假如你的基本内核是4.0，打4.0.3的
 补丁，你不用打4.0.1和4.0.2的补丁。类似的，假如你正在运行4.0.2版本的内核并且想
 要跳到4.0.3，在你打4.0.3的补丁之前，你必须先打4.0.2的补丁（那就是patch -R)。
 你能够在Documentation/applying-patches.txt中读到更多。

 另一种选择方式，这个内核补丁脚本能够自动的进行这个过程。这取决于目前的内核版
 本和应用发现的补丁。

  linux/scripts/patch-kernel linux

 在上面的命令行的第一个参数是内核源的地方。补丁从当前的目录中寻找，但是也可以
 使用一个特殊的目录来作为第二个参数。

-确保没有陈旧的.o文件和依赖文件：

  cd linux 
  make mrproper

 你应该在这时将源代码正确的安装了。

软件需要

 编译和运行4.x的内核需要将各种各样的软件包更新到新的版本。对于需要最小的版本号
 和如何更新那些软件包可以参考Documentation/Changes。要意识到使用太久的软件包会
 直接的引起很难追踪的错误，因此不要想着在编译过程中间出现明显的错误的时候再去
 更新你的软件包。

为内核建立目录：

 当你在编译内核的时候，所有的文件输出默认的都和内核的源代码存储在一起。通过使
 用make O=output/dir可以让你为输出文件指定一个地方（包括.config）。
 例如：

  kernel source code:/usr/src/linux-4.X
  build directory:/home/name/build/kernel

 为了配置和编译内核，使用如下：

  cd /usr/src/linux-4.X
  make O=/home/name/build/kernel menuconfig
  make O=/home/name/build/kernel
  sudo make O=/home/name/build/kernel modules_install install

 请注意：假如O=output/dir这个选项被使用，那么对于make的所有调用都要使用。

配置内核：

 即使你升级了一个小的版本也不要跳过这个步骤。新的配置选项会在每个发行版上添加
 并且假如配置文件没有如预期的被设置的话会引起奇怪的问题。假如你想用最小的工作
 量将已经存在的配置文件应用到一个新的版本的话，使用make oldconfig，他会问你一
 些关于新的配置选项的问题。

-其它配置命令是：

  make config	文本界面。

  make menuconfig 基于文本的彩色菜单，按钮和对话。

  make nconfig	增强的基于文本的颜色的菜单。

  make xconfig	基于（Qt）图形窗口的配置工具。

  make gconfig	基于（GTK+）图形窗口的配置工具。

  make oldconfig 对于你的已存在./.config文件的都使用默认选项，而新的选项询问。

  make silentoldconfig 像上面，但避免让已回答的问题出现在屏幕上，此外更新依赖。

  make olddefconfig 像上面，但给那些默认的值设置成新的符号却不给你提示。

  make defconfig 
	从arch/$ARCH/defconfig或arch/$ARCH/configs/${PLATFORM}_defconfig的配置
	中使用默认的配置符来创建一个./.config文件，但依赖与这个架构。

  make ${PLATFORM}_defconfig
	从arch/$ARCH/configs/${PLATFORM}_defconfig的配置中使用默认的配置符来创
	建一个./.config文件，使用make help能针对你的架构提供一个可使用的列表。

  make allyesconfig 尽可能多的将配置符号设置成y来创建一个./.config文件。

  make allmodconfig 尽可能多的将配置符号设置成m来创建一个./.config文件。

  make allnoconfig 尽可能多的将配置符号设置成n来创建一个./.config文件。

  make randconfig 随机的配置设置符号来创建一个./.config文件。

  make localmodconfig
	基于目前的配置选项和加载的模块（lsmod）来创建一个配置。禁止所有对已经
	加载的模块没有必要的模块选项。

	对于要给另一台机器创建一个localmodconfig配置，首先将那台机器的已加载模
	块（lsmod）存储到一个文件中，然后将其作为一个LSMOD参数传递给他。

    target$ lsmod > /tmp/mylsmod
    target$ scp /tmp/mylsmod host:/tmp

    host$ make LSMODE=/tmp/mylsmod localmodconfig

	上面的对于跨平台编译也能很好的工作。

  make localyesconfig
	类似与localmodconfig，除了他将所有的模块选项都改为内建（=y）选项。

 在Documentation/kbuild/kconfig.txt中，你能够找到关于内核配置工具更多的信息。

-关于make config的注意事项：

 -使用没有必要的驱动将使内核变的更大，并且在某些情况下会导致问题：探测一个不存
  在的控制卡可能混淆你的其他控制器。

 -通过将CPU类型设置的比386更高来编译的这个内核不会在386平台上工作。在启动的时
  候内核能够检测到这一点并放弃启动。

 -即使是在那些从来都不使用数学模拟器的情况下，一个将数学模拟器编译进来的内核仍
  然要使用协处理器。这个内核要稍微大一点，但是他仍能够在不同的机器上工作，并且
  不用理睬他们是否拥有一个数学协处理器。

 -这个kernel hacking配置细节通常会让内核变得更大或更慢（或都是），甚至通过配置
  一个尝试终止那些有问题的代码来找到内核的问题（kmalloc()）的手段会让内核变的
  不稳定。因此，对于那些development，experimental或debugging的特性，你应该使用
  n来回答配置内核的问题。

编译内核：

-确保你使用的至少是gcc 3.2版本的。可从Documentation/Changes找到更多的信息。

 请注意你仍能够在这个内核上运行一个a.out的用户程序。

-通过make命令来创建一个压缩的内核镜像。假如你已经将lilo在makefiles文件中写入编
 译到内核中，你也可以使用make install命令，但是你首先要核查一下你特殊的lilo安
 装。

 为了实际上的安装，你不得不使用root账户，但是正常编译的情况下不会使用他。不要
 滥用root账户。

-假如你将内核的某些部分作为模块配置了，你将不得不使用make modules_install命令。

-内核的编译/构建输出细节：

 通常情况下，会以相当安静的模式构建系统内核（但是不是完全沉默）。所以，有时你
 或者内核的开发者需要看一下编译，链接，或命令，如他们已经执行的命令是否正确。
 对于这种情况，使用verbose的构建模式。通过在make命令中使用V=1来做到。例如：

  make V=1 all

 为了让构建系统也输出每个目标重新构建的原因，要使用V=2。默认的是V=0。

-以防万一，最好在手边有一个内核的备份。这对于开发版内核显得尤其重要，因为每个
 新特性包含了还没有被充分修正漏洞的新代码。也要确保给你对应的内核的模块也做一
 个相应的备份。假如你在安装和你目前正在工作的版本号相同的内核，在你要使用如他
 make modules_install命令之前，要确保给你的模块目录做一个备份。

 在编译前，另外一种方法是使用内核的配置选项LOCALVERSION来附加一个唯一的后缀到
 常规的内核版本。LOCALVERSION能够在General Setup菜单中设置。

-为了启动你的新内核，你需要拷贝内核镜像（例如.../linux/arch/i386/boot/bzImage
 编译后的镜像）到你的启动引导器能够找到的地方。

-能够不在一个启动器（如LILO）的帮助下来直接的启动一个内核已经不再支持了。

 假如你从一个硬盘驱动器上启动Linux，碰巧使用启动器LILO，他通过在/ect/lilo.conf
 这个文件中来指定使用的内核镜像。这个内核镜像文件通常是/vmlinuz，/boot/vmlinuz，
 /bzImage或者/boot/bzImage。为了要使用新的内核，保存一份老镜像的拷贝，然后将新
 的镜像拷贝过来覆盖这个旧的镜像。之后，你必须回到LILO去更新这个加载地图！假如
 你不做，不会启动新的镜像。

 通过运行/sbin/lilo去重新安装LILO通常是有麻烦的。在新的镜像不能正常工作时，你
 能够通过编辑/etc/lilo.conf去指定旧的内核镜像（譬如，/vmlinux.old）。通过查看
 LILO文档能够得到更多的信息。

 假如重新安装LILO的话，你需要对所有选项进行设置。关闭系统，重启，好好享受吧！

 假如你需要在内核镜像方面改变像默认的根设备，图形模式，ramdisk大小等等时，使用
 rdev这个程序（或者适当的改变LILO的启动选项）。没有必要通过改变那些参数就能够
 行得通的方法，却南辕北辙的为此重新编译内核。

-重新启动，享用新的内核吧。

如果出错的怎么办：

-如果你发现了kernel漏洞的问题，请核查一下MAINTAINERS文件去看看是否有关于你遇到
 麻烦的那部分内核维护人员，从那里可以获得援助。假如没有任何人去维护，那么最好
 把那些漏洞信息用邮件的方式发送给我（torvalds@linux-foudation.org）和任何相关
 的邮件列表或者新闻组。

-在那些漏洞报告中，×请×看看你讲的是哪个内核，怎么去抄写这个的问题，和你的设置
 是什么（使用你的常识，动动脑子）。【译者注：这里作者的意思是在进行报告前，先
 要做一下自己的功课，而不是犯一些低级的错误。】如果问题是新的，那么就告诉我。
 假如是个你第一次注意到的一个老问题，也请告诉我。【译者注：这是作者的自我调侃】

-假如在漏洞结果中有如同下面的信息

  unable to handle kernel paging request at address C0000010
  Oops:0002
  EIP: 0010:XXXXXXXX
  eax:xxxxxxxx ebx:xxxxxxxx ecx:xxxxxxxx edx:xxxxxxxx
  esi:xxxxxxxx edi:xxxxxxxx ebp:xxxxxxxx
  ds:xxxx es:xxxx fs:xxxx gs:xxxx
  Pid:xx,process nr:xx
  xx xx xx xx xx xx xx xx xx xx

 或者在你的屏幕或系统日志中出现了类似的信息，请×精确地×抄写他。那些转储对于你
 可能很难理解，但是他包含了帮助解决问题的信息。上面的那些转储信息也是重要的：
 他透漏了内核代码为什么出现了问题（像上面的那个例子就是一个内核的指针错误）。
 更多的关于内核转储的常识信息可以从/Documentation/oops-tracing.txt找到。

-假如你将CONFIG_KALLSYMS选项编译进入了内核，你也能够报告转储信息，否则你将不得
 不使用ksymoops程序来理解那些转储信息（但是使用CONFIG_KALLSYMS进行编译通常是更
 好的办法）。可从ftp:ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/
 获得这个使用程序。另一种可选方案就是用手去查看转储信息。【译者注：作者调侃】

-在解决像上面的转储信息时，假如你能够查到EIP的值意味着什么，那将非常有帮助。那
 些十六进制的值对我或者其他任何人都没有任何用处：因为这些值依赖于你自己的内核
 设置。你应该做的是从这个EIP那一行（不要理睬0010）获得那个十六进制码，在内核的
 名字列表中去查找他看一看是那个内核的函数包含这个违规的地址。

 为了找出内核的函数名字，你需要找到与你的内核表现症状相关的的系统二进制文件。
 这个文件就是linux/vmlinux。为了能够提取到内核名字列表，并从崩溃的内核中找到与
 EIP相匹配的，如下：

  nm vmlinux | sort | less 

 这将会给你一个以内核地址做排序的升序列表，从这个列表中能够找到那个包含了违规
 地址的内核函数。注意那些由内核除虫信息给出的地址，没有必要同函数地址去精确的
 匹配（事实上，那非常的不可能）。因此，你不能仅是grep那个列表：这个列表只是给
 了你每个内核函数起始的指针。应该寻找那个符合条件的函数：这个函数有一个比你正
 在寻找的地址更低的开始地址，而不是那个你正寻找的那个地址后面紧随的，有比这个
 地址更高的地址的函数。事实上，在你的问题报告中包含一点context的文本是一个好的
 注意，围绕这个兴趣点写上几行。

 假如你不能按照上述（你有一个预先编译的内核镜像或者类似）介绍做到的话，那么尽
 可能告诉我你的设置将会有帮助。请详细的阅读关于REPORTING-BUGS文档的详细内容。

-另一种可选方案，你能够在一个正在运行的内核（只读：例如，你不能改变值和设置断
 点）上使用gdb。首先要在编译内核的时候使用了-g选线，才能使用gdb；适当的编辑文
 件arch/i386/Makefile，然后执行make clean。你也需要启用CONFIG_PROC_FS（通过命
 令make config）。

 在你用新的内核重新启动之后，执行gdb vmlinux /proc/kcore。现在你能够使用所有的
 通常的gdb命令。这个命令能够查询你系统的崩溃点是*0xXXXXXXXX（用EIP的值去替换这
 个XXXes值）。

 目前，gdb一个没有运行的内核会失败的，因为gdb对于已被编译的内核不能够找到其起
 始地址的偏移。


==============================================================================
==============================================================================
