============================================================================
数组的下标从0开始记起。
在编写程序的过程中可以用数组名作为函数参数，这种方法实际上是通过数组的首地址
传递整个数组。
在C语言中，使用字符数组保存字符串，也就使用一个一维数组保存字符串中的每一个
字符。此时系统会自动为其添加'\0'作为结束符。
由于C语言允许将一个较大的程序分成若干独立模块文件分别编译，如果一个源文件中
的函数想引用其他源文件中的变量，就可以用extern来声明外部变量。这就是说extern
变量可以扩展外部变量的作用域。在函数内的extern变量说明，表示引用本源文件中的
外部变量，而函数外（通常在文件开头）的extern变量说明，表示引用其他文件中的外
部变量。数组元素做实参时，只要数组类型与函数的行参类型一致，那么作为下标变量
的数组元素的类型也和函数行参变量的类型是一致的。数组名就是数组的首地址。因此
在数组名作为函数的参数时，所进行的传送只是地址的传送，即把实参数组的首地址赋
予行参数组名。
============================================================================
用数组名作为函数的参数时还应该注意以下几点：
1.形参数组和实参数组的类型必须是一致的，否则将引起错误。
2.形参数组和实参数组的长度可以不相同，在参数传递时，只传递首地址而不检查行参
数组的长度。
3.在函数形参表中，允许不给出形参数组的长度或用一个变量来表示数组元素的个数。
4.多维数组也可以作为函数的参数。在函数定义时对形参数组可以指定数组的长度，也
可以省去一维的长度。
===========================================================================
全局变量是通常所说的外部变量，在之前加上static后就是静态全局变量。其二者的存
储均为静态存储方式，但是其作用域不同。非静态全局变量的作用域是整个源程序，当
一个源程序由多个源文件组成时，非静态的全局变量在各个源文件中都是有效的。而静
态全局变量只在定义该变量的源文件内有效，在同一源程序的其他源文件中不能使用他。
通常变量是存储在内存中，当对一个变量频繁读写时，费时，C语言中提供了寄存器变
量，寄存器变量的说明符是register。
===========================================================================
空指针可以确保不指向任何地方，而未初始化的指针则可能指向任何地方。
空指针一般应用于一下的情况：
1.用空指针终止对递归数组结构的间接引用
2.用空指针作为函数调用失败时的返回值
3.用空指针作为警戒值
===========================================================================
在C语言中计算表达式中的布尔值的时候，如果表达式等于0则认为表达式为假，否则为真。
===========================================================================
express代表计算表达式，if(express)与if((express)!=0)等价。
如果用指针p代替express，则if(p)与if(p!=0)等价。
即if(!express)与if((express)==0)等价。
if(!p)与if(p==0)等价。
所以说像类似于if(p)这样的写法是完全合法的。
===========================================================================
&a是数组指针，而指针加1要根据指针类型加上一定的值，不同类型的指针+1之后增加
的大小不同，a是长度为5的int数组指针，所以要加5*sizeof(int)。如果是长度为10的
int数组指针，则要加上10*sizeof(int),而ptr则是一个int型的指针变量，所以加1减1，
变化的只是一个int的大小，这有别于数组指针。
a和&a的地址是一样的，但意思不一样，a是数组首地址，也就是a[0]的地址，&a是对象
首地址，这里的对象是a这个数组，a+1是数组下一元素的地址，即a[1]。&a+1是下一个
对象的地址，即a[5]。
使用*可以指向变量的地址，使用&可以获取变量的地址，可见*和&是互为逆运算的。
假设p为一个指针变量，则可知：
   p  表示指针变量；
   *p  表示p所指向的变量；
   &p  表示指针变量的地址；
   &(*p)  表示变量(*p)的地址，即p；
   *(&p)  表示(&p)所指向的变量，即p；
============================================================================
