2021.11.3

物理中常用跟亮度有关的单位有表示发光强度的坎德拉（candela）
表示光通量的流明（lumen）表示照度的勒克斯（lux）

第一性原理
类比
抽象

5W2H
why
what 
where
when 
who
how
how much

引君入彀(gou 4)
与请君入瓮类似，但意义却不相同，指一般意义下的吸引他人自投罗网

C89标准
1989年， ANSI 发布了第一个完整的C语言标准——ANSI X3.159—1989，
简称“C89”，不过人们也习惯称其为“ ANSI C ”。C89在1990年被国际
标准组织 ISO (International Organization for Standardization)
一字不改地采纳，ISO官方给予的名称为：ISO/IEC 9899。 1989年， 
美国国家标准协会 （ANSI）通过了C语言标准，被称为 ANSI X3.159-1989 
"Programming Language C" 。因为这个标准是1989年通过的，所以一般
简称 C89标准 。 有些人也简称 ANSI C
ISO/IEC 9899
9899 是C语言在 ISO 标准中的代号，像 C++ 在 ISO 标准中的代号是14882；
而冒号后面的 1990 表示当前修订好的版本是在 1990 年发布的。
C99标准
在随后的几年里，C语言的标准化委员会又不断地对C语言进行改进，到了
1999 年，正式发布了 ISO/IEC 9899: 1999，简称为 C99 标准。
C99 标准引入了许多特性，包括内联函数（inline functions）、
可变长度的数组、灵活的数组成员（用于结构体）、复合字面量、
指定成员的初始化器、对IEEE754浮点数的改进、支持不定参数个数
的宏定义，在数据类型上还增加了 long long int 以及复数类型。
即便到目前为止，很少有C语言编译器是完整支持 C99 的。
C11标准
2007 年，C语言标准委员会又重新开始修订C语言，到了 2011 年正式发
布了 ISO/IEC 9899: 2011，简称为 C11 标准。
C11标准新引入的特征尽管没 C99 相对 C90 引入的那么多，但是这些也
都十分有用，比如：字节对齐说明符、泛型机制（generic selection）、
对多线程的支持、静态断言、原子操作以及对 Unicode 的支持。

程序 = 算法 + 数据结构
多写代码，
阅读代码，多改bug
断点调试

预处理器（cpp）-> 编译器（cc1）-> 汇编器（as）-> 连接器（ld）

猪没有汗腺，一般多养殖于我国西南地区

凡物过分必有流弊
流弊：
指某事引起的坏作用，也指相沿下来的弊端

不乱于心，不困于情，不畏将来，不念过往，如此，安好。

牵一发而动全身

晱（shan 3）：电；晶莹的样子。

杨花：古代诗词中多指的是柳絮，

耒（lei 3）：本意是指用较为老成坚韧的树枝制作而成的一种二分
			叉形的翻土工具。

红外对管

ship date：发布日期


理解，实践，读书笔记，总结作者说了什么，还要写自己的感悟，用自己的话
进行整合，从而形成一个新体系

编码（encode）
解码（decode）
多字节编码
统一编码（Unicode）
	定义的一个表，表中为世界上每种语言的每个字符设定了统一并且惟一的码位（code point）
	以满足跨语言，跨平台进行文本转换的要求。

具体问题具体分析
自顶向下
纵向思考
横向思考

if for else while 字符串操作，内存操作，练习查找 排序 二叉树等基本数据结构
每天一道

左闭右闭 [left,right]  while(left <= right)     if(num[middle] > target) right = middle-1
左闭右开 [left,right)  while(left < right)		if(num[middle] > target) right = middle 

int find(int *p,int x)
{
	if(x >= MAX_SIZE)
	{
		fprintf(stderr,"Out_of bounds value\n");
		exit(EXIT_FAILURE);
	}
	if(p[x] ==x)
	{
		return x;
	}
	else
	{
		p[x] = find(p,p[x]);
		return p[x];
	}
}
void join(int *p,int x,int y){p[find(p,x)]=find(p,y);}

在一个数组中找一个数，方法巧妙，利用函数参数传递一个数组和一个数，
先判断数x是否大于最大值，在判断数组的第x位置的数是否等于x,是的话
就返回x,否则利用递归将find(p,p[x])的值赋给p[x],然后返回p[x]。



PID算法
首先定义一个结构体，定义KP系数，KI系数，KD系数，积分值，上一次的值
然后写一个函数，参数有定义的结构体指针，以及误差值error，积分微分周期dt
	分别计算比例，积分，微分值，然后返回它们的和
	其中将上一次的值更新为error
主函数中，
	先赋初值给结构体中的上一次的值，以及积分值，给其为0
	后手动输出KP，KI，KD值，
	
	死循环
		输入差值，然后计算，最后打印

梦境总是虚幻的，天马行空的；现实总是真实的，循规蹈矩的。

MECE分析法
第一步，确认问题是什么
第二部，寻找MECE切入点
第三步，考虑 分类可否再细分
第四步，确认有没有遗漏或重复

事实上,我们遇到的每个问题背后都是一个复杂的生态系统。
生态系统思维，简单说就是把事物联系在一起看，看成链、看成网、看成生态系统，
而不只看作是一个个相对孤立的个体
这个思维背后的根本逻辑是“任何两个对象之间都是相互联系、相互影响的”。我们在
思考时，就需要把各个相关的对象放在一个类似于生态系统的体系中去思考，这样我
们才能更准确、更完整的理解。
如何提高自己的系统思维能力？
系统思维是看待事物整体观的能力，把认识对象作为系统，从系统和要素、要素和要素、
系统和环境的相互联系、相互作用中综合地考察认识对象的一种思维方法。系统思维以
系统论为思维基本模式的思维形态，它不同于创造思维或形象思维等本能思维形态。
系统思维能极大地简化人们对事物的认知。
一、深入思考：从专注个别事件到洞悉系统的潜在结构
系统思考看待世界，不只是关注一个个孤立的事件，而是主张看到事件之间的相互关联与作用模式以及发展趋势，更进一步要看清影响、推动该模式与趋势发生的潜在的“结构”。
在系统思考看来，“结构影响行为”——正是构成系统的主要变量之间的相互作用与影响，驱动着系统的变化，生成不同的行为模式，从而表现出一个个事件。
二、动态思考：从线性思考走向环形思考
在传统的思维模式中，人们假设因与果之间是线性作用的，即“因”产生“果”；但在系统思考中，因与果并不是绝对的，因与果之间有可能是环型互动的，即“因”产生“果”，此“果”又成为他“果”之“因”，甚至成为“因”之“因”。
在企业管理方面最为典型的应用是，针对一个问题，人们借助鱼骨图、思维导图等方法分析其原因，然后再探讨解决方案。如果只是停留在把问题分解和聚类的层面上，而没有审视原因与结果之间的相互关联或相互作用，就没有做到系统思考。
三、全面思考：从局限于本位到关照全局
组织是一个环环相扣的复杂系统，任何一个部门或成员的一个举措，都可能在不同的时间、对系统中的不同主体产生这样或那样的影响。
虽然“我们是一个整体”的道理很好理解，“盲人摸象”的寓言也是妇孺皆知，但在组织中，最常见的问题仍然是“本位主义”，局限思考和行动，每个人每个部门都只是从自己的本位出发，“归罪于外”，结果造成组织中充满了相互指责和平庸、甚至是愚蠢的决策。
产生这个问题的原因一方面在于组织系统的动态复杂性，另一方面，也与人们缺乏有效进行整体思考的能力不无关系。
四、整体思考：从机械还原论到整体生成论
如果你希望了解一个系统，影响和控制系统的行为，并进而能够预测它的行为，就必须将系统作为一个整体。系统整体具备它们组成部分所不具备的特性，因此，将事物分割开来，无论分割得多细，研究得多深，可能也无法辨识出系统层面上的特性。
然而，将事物分割开来进行分析、研究的“还原论”思维方法，其结果往往并不是一个个有机联系的整体，而是消弱了我们看到整体的能力，产生了诸多现代企业的典型问题：相互推诿，矛盾重重，效率低下，甚至工作越努力，整体绩效却越差！
从操作层面来讲，培养系统思考建议通过以下几种途径来进行：
1、相关阅读：推荐《系统之美》德内拉·梅多斯著
2、更为重要的是还需要借助日常生活中、工作中的案例来不断修炼。
3、平时在生活中、工作中，当别人在说的时候，自己认真听，不着急于表达自己的观点，进行系统思考后再表达。
4、发现和寻找生活中/工作中非常稳重的高人，虚心求教。
从今天起，建立一种系统化的思维模型，不再独立的看待周边的一切，是我们理性、准确认知事物的开始。

叶子的离去，是风的追求还是树的不挽留


int bis(int x,int m)
{
	int result = x&0|m;
	return result;
}
int bic(int x,int m)
{
	int result = (x|(~x))&m;		// 需要加括号()
	return result;
}


建立意义
建立关联
注意力集中
走出舒适区
惯性思维
复盘
复利
反馈
重复
联想
建构
迁移
显性知识（主动复述，表达） 隐性知识（肌肉记忆）
记忆的储存模式，本质上就是神经元之间的协同，若干个神经元通过突触连接，组织起来，
形成一个集团，就构成了一个「概念」—— 这就是记忆储存的最基本单位
一个概念，通过各种突触，跟对应的图像、声音、或者其他概念连接起来，产生「联想」——
 这就构成了一个小的小的网络，也就是一个「知识点」。
行动
学习
积累
浓缩
提炼
知识卡片
1、每天一个知识点（弄懂的基础上，用自己的话表述出来）（尽可能简短的语言，提炼最核心的信息）
2、结构化
		本质：它的核心是什么？我可以如何理解它？
		来源：它来自哪里？为何会产生？原因是什么？
		去处：它表现为什么？我能拿来做什么？如何操作？
		联想：它跟其他什么东西相关？可能会涉及到哪些概念？
	情绪反应
		本质：激素变化，下意识反应，应对环境的进化优势
		来源：杏仁核活跃，抑制前额叶皮层
		去处：战或逃反应，身体的高唤醒状态；FESU模式，场景预演。
		联想：三脑系统；CBT方法；《思考快与慢》……
3、升维整合
4、转化行动

网络字节序（big endian）
JAVA编写的程序采用big endian方式存储数据
0x12345678
big endian：低存高，高存低		0x12345678
small endian：低存低，高存高	0x78563412

虚拟内存地址技术	处理内存地址
主要是简化程序的编写以及方便操作系统对进程间内存的隔离管理
虚拟内存地址与物理内存地址
MMU
一个硬件，由于在机器语言层面都是采用虚拟地址，当实际的机器码程
序涉及到内存操作时，需要根据当前进程运行的实际上下文将虚拟地址
转换为物理内存地址，才能实现对真实内存数据的操作。
User Space
Stack：栈区域，自高地址向低地址增长
Mapping Area：这里是与mmap系统调用相关的区域。自高地址向低地址
Heap：堆区，自低地址向高地址增长
Bss：存放的是未初始化的全局变量
Data：存放的是初始化后的全局变量
Code：这是整个用户空间的最低地址部分，存放的是指令
brk与sbrk
int brk(void *addr);
void * sbrk(intptr_t increment);
按页大小对齐
资源限制与rlimit
系统对每一个进程所分配的资源不是无限的，因此每一个进程都有一个
rlimit表示当前进程可用的资源上限。这个限制可以通过getrlimit系统
调用得到
int main ( ) {
     struct rlimit * limit = ( struct rlimit * ) malloc ( sizeof ( struct rlimit ) ) ;
     getrlimit ( RLIMIT_AS , limit ) ;
     printf ( "soft limit: %ld, hard limit: %ld\n" , limit -> rlim_cur , limit -> rlim_max ) ;
}
struct rlimit {
     rlim_t rlim_cur ;    /* Soft limit */
     rlim_t rlim_max ;    /* Hard limit (ceiling for rlim_cur) */
} ;

手势识别，具体计数可以大概分成三种——ToFu技术，结构光技术以及毫米波雷达的技术
ToF（Time of Flight）全程飞行时间
	是一种通过光线的传播时间来测量距离的技术。
	需要一个能够发射光线的装置和接收光线的感应装置
结构光技术
	基本原理与ToFu技术类似，所不同之处在于其采用的是具有点线面等
	模式图案的光
	包括红外激光发射器，红外传感器，色彩传感器以及实感图像处理芯片
	三角测距原理
毫米波雷达
	原理同样与ToF技术基本相同，只不过用于测量的介质从光线变成了无线电波
	
电流或变化的电场都可以产生磁场
麦克斯韦方程组中的全电流定律

12/7
书读百遍，其意自见
努力将书中有用的东西转换成自己内在
将学到的东西用于实践中
自主思考，主见
重复阅读就是不断认识和认识不断提高的过程
精勤求学 精勤指专心勤勉，求学意为探求学问
敦笃励志 敦笃指敦厚笃实，励志指集中心思致力于某种事业
果毅力行 果毅指果敢坚毅，力行一是指竭力而行，二是指努力实践
忠恕任事 忠恕是儒家伦理道德的基本范畴，任事一是称职，胜任所担当的职责
读书不是为了雄辩和反驳，也不是为了轻信和盲从，而是为了思考和权衡
苏格拉底说：承认自己的无知才是开启智慧的大门
涵泳

UART（universal asynchronous receiver/transmitter)
USART （universal synchronous/asynchronous receiver/transmitter）
serial communication		串行通信
parallel communication		并行通信
COM口和RS232
TTL（transistor-transistor logical）晶体管-晶体管逻辑集成电路

递归是将一个问题划分成多个子问题求解，动态规划也是如此，但是动态
规划会把子问题缓存起来，从而避免重复求解子问题
递归是一种解决问题的有效方法，在递归过程中，函数将自身作为子例程调用
递归程序应包含2个属性
1、基本情况，保证程序调用及时返回，不再继续递归，保证程序可终止
2、递推关系

对数的定义
如果 ，即a的x次方等于N（a>0，且a≠1），那么数x叫做以a为底N的对数（logarithm），
记作。其中，a叫做对数的底数，N叫做真数，x叫做“以a为底N的对数”。
特别地，我们称以10为底的对数叫做常用对数（common logarithm），并记为lgN。
称以无理数e（e=2.71828…）为底的对数称为自然对数（natural logarithm），并记为lnN。
零没有对数。 
在实数范围内，负数无对数。  在虚数范围内，负数是有对数的。
事实上，当，，则有e(2k+1)πi+1=0，所以ln(-1)的具有周期性的多个值，ln(-1)=(2k+1)πi。
这样，任意一个负数的自然对数都具有周期性的多个值。例如：ln(-5)=(2k+1)πi+ln 5。 

12/8
GPIO: general peripheral input/output,通用的外设输入输出接口
在GPIO内部，一般都有一个方向选择寄存器，里面每一位用来控制一个引脚的方向
在GPIO内部，一般都有一个数据寄存器，里面每一位都用来控制一个引脚的输出电平

二极管
二极管的电流具有单向性，正向导通，反向截止
当V大于某个阈值，二极管就导通，导通时电阻约等于0
当V<0，二极管不会导通，电阻无穷大
由PN节组成，P代表正极（positive）N代表负极（negative）
二极管中流动的是电子，电流方向是从正极到负极，电子流动的方向是从负极到正极

三极管
物质会从浓度大的地方扩散到浓度低的地方
NPN
PNP

同步与异步
synchronous 
	时钟信号：用来通知对方要接收数据了
	数据信号：用来传输数据
asynchronous 
	数据信号：只需要数据信号，不需要时钟信号
	使用异步信号传输数据时，双方遵守相同的约定
	起始信号
	数据的表示
	结束信号

芯片内部的三极管，被称为open collector，开集，也就是芯片内部的
三极管的集电极是开放的。芯片内部不驱动三极管时，集电极的电平由
外面的上拉电阻决定

title
features
description
table of contents
pin configuration and functions 
absolute maximum
electrical characteristics
typical characteristics
functional block diagram
feature description
typical application
layout guide 
packaging information
package outline 
example layout 
软件工程师更关注寄存器，协议等


int add2(int x,int y){
	return x+y;
}
typedef int(*FUN)(int,int);
FUN func = &add2;
func();


太多的信息记不住
喜欢有规律的信息
结构化思维


 static char *classes = "WSU";
    char letter = classes[1];
        printf("%c\n",letter);


int array[4][4]		// 二维数组
int (*array)[4]		
		

hash（散列函数）

12/10
5W2H

频率的概念
时钟信号：是由一系列的脉冲信号构成，并且总是按一定电压
	幅度，时间间隔连续发出的方波信号，它周期性地在0和1
	之间往复变化
在第一脉冲和第二个脉冲之间的时间间隔称之为周期，单位是(s)
单位时间1s内产生的脉冲个数称之为频率，频率的最基本计量
单位就是赫兹Hz
GHz级，也就是每秒钟产生10亿个脉冲信号
时钟周期作为CPU操作的最小时间单位，内部的所有操作都是以
这个时钟周期作为基准。
主频=外频X倍频
倍频的提出
主频更高，但是外部的主板芯片组，内存，外部接口还是处于旧有
标准，而这些设备的运行频率早就固定下来了，这样CPU就无法与之
很好交流，所以就有了倍频的概念
CPU的内部设计有一个锁相环频率发生器，对输入的时钟信号进行分频处理，
从而得到CPU的实际工作频率，这个比例就称之为倍频系数
超频
一般指强迫设备运行在高于其默认频率的主频以获得更高的性能
诸如CPU，显卡，内存等都可以超频
CPU超频超的无非是外频或倍频，通过主板BIOS中的softMenu技术
调整BIOS就可提高CPU的主频
超频会导致CPU发热量远大于正常工作温度，甚至是降低 CPU性能、
寿命（缩缸）或造成系统的不稳定（蓝屏）

摩尔定律

12/13
施密特触发器（schmitt trigger）
在电子学中，施密特触发器是包含正反馈的比较器电路
对于标准施密特触发器，当输入电压高于正向阈值电压，输出为高；
当输入电压低于负向阈值电压，输出为低；当输入在正负向阈值电压
之间，输出不改变，也就是说输出由高电准位翻转为低电准位，或是
由低电准位翻转为高电准位时所对应的阈值电压是不同的。只有当输
入电压发生足够的变化时，输出才会变化，因此将这种元件命名为触
发器。这种双阈值动作被称为迟滞现象，表明施密特触发器有记忆性。
从本质上来说，施密特触发器是一种双稳态多谐振荡器
施密特触发器可作为波形整形电路，能将模拟信号波形整形为数字电
路能够处理的方波波形，而且由于施密特触发器具有滞回特性，所以
可用于抗干扰，其应用包括在开回路配置中用于抗扰，以及在闭回路
正回授/负回授配置中用于实现多谐振荡器

线与
两个漏极分别直接接到SCL线或SDA线的方法就是线与。所谓线与，
指的是它们任意一开关只要对地导通，这根线就一定是低电平

开漏输出
推挽输出

一、设定读书目标
二、制作思维导图
三、化理论为实践

快速浏览-速读-精读-整理
(一天4小时，2~3天为宜)
(2~3天)

通读法：培养思考框架
树读法：主题阅读法
图读法：如何啃书（秋叶微博）

12/15

————————————————
爿 pán
劈开的成片的木柴
量词，指商店，田地，工厂等，一爿商店

电池放电C率
一般充放电电流的大小常用充放电倍率来表示
充放电倍率=充放电电流/额定容量；
例如：额定容量为100Ah的电池用20A放电时，其放电倍率为0.2C
1C，2C是电池放电速率，表示放电快慢的一种量度
所用的容量1小时放电完毕，称为1C放电
5小时放电完毕，称为1/5=0.2C放电。
一般可以通过不同的放电电流来检测电池的容量
充放电效率也与C（倍率）相关，在0.2C条件下，聚合物锂电池的充放电
效率应该在99.8%

放电速率简称放电率，常用时率和倍率表示
时率：
是以放电时间表示的放电速率，即以某电流放至规定终止电压所经历的
时间，例如某电池额定容量是 20小时率时为12AH即以C20=12AH表示，
则电池应以12/20=0.6A的电流放电，连续达到20H者即为合格。
倍率：
是指电池放电电流的数值为额定数值的倍数，如放电电流表示为
 0.1C20 ，对于一个 12AH（C 20 ）的电池，即以12*0.1=1.2A的电
 流放电，3C 20 是指36A的电流放电，C的下脚标表示放电时率。

屏幕刷新率
是指电子束对屏幕上的图像重复扫描的次数，以Hz为单位


调制
两种调制方式
高斯频移键控GFSK，具有1MSym/s的符号速率
与第一种相似，但是具有2MSym/s的符号速率
LE 1M PHY 	1MSym/s			无编码		无编码				1Mb/s 
LE Coded PHY 	1MSym/s		编码S=8 	编码S=8；编码S=2	125kb/s;500kb/s 
LE 2M PHY 	2MSym/s			无编码 		无编码 				2Mb/s

频率调制是指降低频数据信号加载到高频载波上，数据的变化反映为调制波频率的疏密变化
数字化的信号仅有0、1变化，在调制时，可以定义载波频率正向偏移视为1，负向偏移视为0。
这种调制方式称为“频移键控（FSK）”。数字信号发生0/1变换时，会产生大量噪
声，引入高斯滤波器能够延展0/1变换时间，从而降低噪声。这种做法称为“高斯
频移键控（GFSK）”
GFSK技术成熟，实现简单，适合低功耗BLE的需求。
BLE协议规定，中心频率正向偏移大于等于185kHz视为比特1， 负向偏移大于等
于185kHz视为比特0。如果选择2402MHz作为中心频率，比特1的频率应为2402.185MHz，
比特0的频率应为2401.815MHz。


I/O口的功能大致分为输入，输出以及输入输出双向三大类。


三极管是靠电流导通的，而MOS管是靠电压导通的
上拉电阻应用很多
1、OC门要输出高电平，必须外部加上拉电阻才能正常使用
2、加大普通IO口的驱动能力
3、在电平转换电路中，比如5V转12V的电路中，上拉电阻其实起到的是限流电阻的作用
4、单片机中未使用的引脚，比如总线引脚，引脚悬空时，容易受到电磁干扰而处于紊乱状态
 加上一个对VCC的上啦电阻或者一个对GND的下拉电阻后，可以有效抵抗电磁干扰

电机的分类方式很多，从用途方面可以分为驱动类电机和控制类电机
直流电机属于驱动类电机	电能转换为机械能
步进电机属于控制类电机	脉冲信号转换成一个角度的电机
步进电机又分为反应式，永磁式，混合式三种



有两种类型的设计电路来获得电池的容量
一种是A/D模数转换，通常是12位精度，降电压转换成12位精度的16进制数字后
乘于取样的间隔时间
一种是集成模式，利用RC积分电路来获得电压对时间的积分值

续流二极管
蜂鸣器是感性器件，当三极管导通给蜂鸣器供电时，就会有导通电流流过蜂鸣器
而电感的一个特点就是电流不能突变，导通时电流是逐渐增大的，这没有问题，
当当关断时，经电源－三极管－蜂鸣器－地这条回路就被截断了，过不了任何电流
了，那么储存地电流往哪儿去了，就是经过这个D４和蜂鸣器自身地环路来消耗
掉了，从而避免了关断时由于电感电流造成地反向冲击，接续关断时的电流，就是
续流二极管名称的由来、

线与：所有接入的器件保存高电平，这条线才是高电平，而任何一个器件输出一个低电平，
	这条线就会保持低电平，因此可以做到任何一个器件都可以拉低电平，也就是
	任何一个器件都可以作为主机。
	

icircuit
everycircuit.com

EEPROM

色环电阻
黑 棕 红 橙 黄 绿 蓝 紫 灰 白 金 银 无色带
0  1   2  3  4  5  6  7  8  9  误差

色环电阻的第一条色环(通常靠近电阻端头的)表示阻值的第一位数字、
第二条色环表示阻值的第二位数字、第三条色环表示阻值的第三未数字、
第四条色环表示阻值乘数的10的倍数、第五条色环：误差。
首先，四环和五环的区别在于，少了一环为有效数字而已;其它的读法差不多，
按照四环电阻的读数表格操作，第一位颜色是红色，依次为红色，黑色，金色。
从左向右数，第一道色环表示阻值的最大一位数字，第二道色环表示阻值的第
二位数字，第三道色环表示阻值倍乘的数，第四道色环表示阻值允许的偏差(精度)。

Cellular 蜂窝

蓝牙BR/EDR（基本速率/增强数据率）
低功耗蓝牙（Bluetooth Low Energy）

静态电流：
简单的解释，就是负载电流之外部分的电流和电源芯片自身消耗的电流，
而除去静态电流的系统就称之为最小系统
定义：非活动或休眠的状态或阶段。
因此，静态电流IQ是系统处于待机模式且在轻载或空载条件下所消耗的电流。
静态电流会与关断电流相混淆，
关断电流是指设备处于关闭状态但系统仍然与电池相连得情况下所消耗的电流。
这两种参数在任何电池电流消耗低的设计中都很重要
静态电流适合用于大多数集成电路（IC）设计，其中放大器，升降压转换器和低压降稳压器（LDO）
都会影响消耗的静态电流量


三态门
三态是指：高电平，低电平，高阻态
三态门有三种输出状态：输出高电平，输出低电平和高阻状态。
	前两种状态为工作状态，后一种状态为禁止状态。
	在工作状态下，三态门的输出可以为逻辑“0”或逻辑“1”
	在禁止状态下，三态门的输出呈现高阻态，相当于开路
三态门有广泛的应用，利用三态门可以实现线与，也被广泛应用于总线传输。
总线传送时，为了保证数据传送的准确性，任意时刻，n个三态门的控制端只能
有一个为1，其余均为0，而三态门利用高阻态可以很好的实现这一特性


输出 
简化
把一个东西从复杂回归简单，并不是在降级，而是在升维

电平信号和脉冲信号的产生
电平信号就是一种电压信号，它的特点就是输入不变，供电不变，电路其他参数
稳定的情况下，某一段时间中，保持一个相对固定的值。比如数字电路中的，
高电平信号，低电平信号。
脉冲信号一般是由振荡电路产生的，振荡电路通过自我激励的形式（正反馈），
形成一个特殊波形，然后通过与非门这样的电路整形后就可以得到脉冲信号了。


孟郊《登科后》
昔日龌龊不足夸，今朝放荡思无涯。
春风得意马蹄疾，一日看尽长安花。

assert() 
断言函数（宏），用于在调试过程中捕捉程序错误
void assert(int expression);
assert()会对表达式expression进行检测：
·如果expression的结果为0（条件不成立），那么断言失败，表明程序出错，assert()会向标准输出设备，打印一条错误信息，并调用abort()函数终止程序的执行
·如果expression的结果为非0（条件成立），那么断言成功，表明程序正确，assert()不进行任何操作。
在assert.h头文件中的源码，assert()的定义形式
#ifdef NDEBUG
#define assert(e) ((void)0)
#else
#define assert(e)  \
    ((void) ((e) ? ((void)0) : __assert (#e, __FILE__, __LINE__)))
#endif

简单示例
#include <stdio.h>
#include <assert.h>
int main()
{
	int m,n,result;
	scanf("%d %d",&m,&n);
	assert(n != 0);  // assert(n) 更简洁
	result = m / n;
	printf("result = %d\n",result);
	return 0;
}


CPU  central processing unit 	 中央处理器
GPU  Graphics processing unit    图形处理器
TPU	 tensor processing unit 	 张量处理器
NPU  neural network processing unit   神经网络处理器


三八译码器
	三个端口控制八个引脚输出

	
LDO（low Dropout Regulator），低压差线性稳压器，
PCB（printed circuit board），印制电路板

P：比例	存在最大静态误差，系统振荡
I：积分	消除静态误差
D：微分 滞后系统，预先处理，减小振荡
位置式PID	积累误差大
增量式PID

指针and数组
[] = *()
arr[1] = *(arr+1);
arr数组名，是一个标签，数组首地址，arr+1先偏移1个步长，然后* 解引用


SPI 
what 串行外围设备接口，是一种通信协议，用于单片机之间或
	其他硬件外围设备的数据交换。
	8位 MSB first，LSB last		Most Significant Bit，Last Significant Bit
	SCK，MOSI，MISO三个引脚
	SP0 SP1 SP2 SP3 四种模式 由 CPOL CPHA决定
		CPOL位控制SPI时钟空闲状态，CPHA控制时钟接收数据的边缘方向


LDO(low dropout regulator)
一般使用的电源芯片无非就是LDO和DC-DC
LDO 
低压差线性稳压器，
低压差：输出压差比较低，例如输入3.3V，输出可以达到3.2V
线性：LDO内部的MOS管工作于线性电阻
稳压器：说明LDO的用途是用来给电源稳压
LDO工作原理：通过运放调节P-MOS的输出
	LDO核心架构：P-MOS＋运放，通过芯片内部已经设置好的电阻
				来调节P-MOS的输出
				
#ifdef __cplusplus
extern "C" {
#endif
为了在C++代码中调用用C写成的库文件，就需要用extern "C"来高速编译器：
这是一个用C写成的库文件，请用C的方式来链接它们。
extern "C"表示编程生成的内部符号名使用C约定。
因为C++支持函数重载，而C不支持函数重载，两者语言的编译规则不一样。
编译器对函数名的处理方法也不一样。假如有这一个函数原型
void func(int a, int b){
	... //code
}
可能在C++编译之后会产生_func_int_int之类的名字，因为C++支持函数重载， 
而C编译之后，可能为_func


演绎（Deduction）
所谓演绎法或称演绎推理（Deductive reasoning）是指人们以一定的反映客观规律的理论认识为依据，
从服从该认识的已知部分推知事物的未知部分思维方法。是由一般到个别的认识方法。演绎法是认识“隐
性”知识的方法

演绎推理有三段论，假言推理和选言推理等形式
三段论，是指由两个简单判断作前提，和一个简单判断作结论组成的推理。
三段论中包含三个部分：一是大前提；二是小前提；三是结论。
运用三段论，其前提一般应是真实的，符合客观实际的，否则就推不出正确的结
例：
·大前提：所有人都会死
·小前提：苏格拉底是人
·结论：苏格拉底会死



learning by doing 
code by hand
ask for help		stack overflow  滴滴踏步厂
keep calm
keep going
《C primer plus》
《C++ primer plus》
《UNIX网络编程》
《零基础写编程系列之C语言》
仔细研究Apache源码



知识没有用起来
没有及时复习
只有输入没有输出


枚举定义：
enum DAY{
	MON,
	TUR,
};
①
int main()		// 定义指针
{
	int a = 10;
	enum DAY *Day;
	Day = (enum DAY *)&a;
	printf("%d\n",*Day);
	return 0;
}
②
int main()
{
	//enum DAY Day = MON;		// 定义枚举变量时赋值
	enum DAY Day;				// 定义时不赋值，后面赋值
	Day = MON;
	printf("%d\n",Day);
	return 0;
}




















